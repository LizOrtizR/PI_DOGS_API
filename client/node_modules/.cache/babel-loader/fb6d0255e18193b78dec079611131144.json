{"ast":null,"code":"import { GET_DOGS, GET_BY_NAME, GET_BY_DETAIL, GET_TEMPERAMENTS,\n// FILTER_BY,GET_BY_TEMPERAMENTS,CHARGE_ALL, ORDER_BY, \nCLEAN_DETAIL, CLEAN_DOGS, FILTER, ORDER } from \"./actions\";\nconst initialState = {\n  //estado global al inicio de mi aplicacion \n  allDogs: [],\n  dogsCopy: [],\n  detailDog: {},\n  temperaments: [],\n  filtered: [],\n  breed_group: [] //copia del estado para que sea exactamente igual a allDogs|| es una manera de regresar al estado origina; \n};\n\nexport const rootReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let payload = arguments.length > 2 ? arguments[2] : undefined;\n  //es una funcion que es quien sabe que va a modificar \n  switch (action.type) {\n    case GET_DOGS:\n      return {\n        ...state,\n        ///retorna una copia del estado, modificando el valor que quiero modificar y retorna un estado nuevo \n        allDogs: action.payload,\n        dogsCopy: action.payload,\n        filtered: action.payload\n      };\n    case GET_BY_NAME:\n      return {\n        ...state,\n        filtered: action.payload\n      };\n    case GET_BY_DETAIL:\n      return {\n        ...state,\n        detailDog: action.payload\n      };\n    case CLEAN_DETAIL:\n      //me retorna una copia del estado y me da un objeto vacio, esto es para limpiar el estado\n      return {\n        ...state,\n        detailDog: {}\n      };\n    case CLEAN_DOGS:\n      return {\n        ...state,\n        allDogs: []\n      };\n    case GET_TEMPERAMENTS:\n      return {\n        ...state,\n        temperaments: action.payload\n      };\n    case FILTER:\n      const allDogsTemperaments = state.allDogs.filter(dog => dog.temperaments === payload);\n      return {\n        ...state\n      };\n\n    //  case GET_BY_TEMPERAMENTS:\n    //    return {...state, \n    //     filtered: state.dogsCopy.filter(el=>el.temperaments? el.temperaments.includes(action.payload):null)\n\n    //   }; \n\n    //   case FILTER_BY:\n    //     if(action.payload === 'DB'){\n    //       if( state.allDogs.filter((item)=> (typeof item.id) === 'string').length === 0 ){\n    //          return alert('no dog')\n    //       }\n    //       return {\n    //           ...state, \n    //           filtered: state.allDogs?.filter((item)=> (typeof item.id) === 'string')}\n    //       }\n\n    //   else {\n    //       return {\n    //           ...state, \n    //           filtered: state.allDogs.filter((item)=> (typeof item.id) === 'number')}\n    //       } ;  \n\n    //   case CHARGE_ALL:\n    //     return{\n    //       ...state,\n    //       filtered:state.dogsCopy\n    //     }; \n\n    //     case ORDER_BY:\n    //       if(action.payload === 'A-Z'){\n    //         return {\n    //             ...state, \n    //             filtered: [...state.filtered].sort((prev, next) => {\n    //             if(prev.name > next.name) return 1\n    //             if(prev.name < next.name) return -1\n    //             return 0\n    //         })}}\n\n    //     if(action.payload === 'Z-A'){\n    //         return {\n    //             ...state, \n    //             filtered: [...state.filtered].sort((prev, next) => {\n    //             if(prev.name > next.name) return -1\n    //             if(prev.name < next.name) return 1\n    //             return 0\n    //         })}}\n\n    //     if(action.payload === 'desc'){\n    //         return {\n    //             ...state, \n    //             filtered: [...state.filtered].sort((prev,next) => prev.weight.slice(0,2) - next.weight.slice(0,2) )}\n    //        }\n\n    //     if(action.payload === 'asc'){\n    //         return {\n    //             ...state, \n    //             filtered: [...state.filtered].sort((prev,next) => next.weight.slice(0,2) - prev.weight.slice(0,2))}\n    //         }     \n    //     else {\n    //         return {\n    //             ...state, \n    //             filtered: state.dogsCopy}\n    //         };\n\n    default:\n      return state;\n  }\n};\nexport default rootReducer;","map":{"version":3,"names":["GET_DOGS","GET_BY_NAME","GET_BY_DETAIL","GET_TEMPERAMENTS","CLEAN_DETAIL","CLEAN_DOGS","FILTER","ORDER","initialState","allDogs","dogsCopy","detailDog","temperaments","filtered","breed_group","rootReducer","state","arguments","length","undefined","action","payload","type","allDogsTemperaments","filter","dog"],"sources":["/Users/lizzyortiz/Downloads/PI-Dogs-main/client/src/redux/reducer.js"],"sourcesContent":["import { GET_DOGS, GET_BY_NAME, GET_BY_DETAIL, GET_TEMPERAMENTS,\n  // FILTER_BY,GET_BY_TEMPERAMENTS,CHARGE_ALL, ORDER_BY, \n  CLEAN_DETAIL,CLEAN_DOGS, FILTER, ORDER,} from \"./actions\"\n\nconst initialState ={  //estado global al inicio de mi aplicacion \nallDogs:[],dogsCopy:[], detailDog: {}, temperaments:[], filtered:[], breed_group:[] //copia del estado para que sea exactamente igual a allDogs|| es una manera de regresar al estado origina; \n\n}; \n\n\nexport const rootReducer=(state = initialState,  action, payload)=>{ //es una funcion que es quien sabe que va a modificar \n  switch (action.type) {\n    case GET_DOGS:\n        return {...state, ///retorna una copia del estado, modificando el valor que quiero modificar y retorna un estado nuevo \n            allDogs: action.payload, \n            dogsCopy: action.payload,\n            filtered:action.payload\n        };   \n      case GET_BY_NAME:\n        return {...state, \n          filtered:action.payload,\n\n        }; \n\n     case GET_BY_DETAIL:\n         return{...state,\n          detailDog:action.payload,\n      }; \n      \n    case CLEAN_DETAIL:    //me retorna una copia del estado y me da un objeto vacio, esto es para limpiar el estado\n      return{\n        ...state,\n        detailDog:{}\n      }\n    case CLEAN_DOGS:\n      return {\n        ...state,\n       allDogs:[]\n      }\n\n    case GET_TEMPERAMENTS:\n        return {...state,\n        temperaments: action.payload,\n      \n      }; \n\n    case FILTER:\n      const allDogsTemperaments = state.allDogs.filter(dog =>\n        dog.temperaments=== payload)\n      return {\n        ...state,\n      }\n\n  //  case GET_BY_TEMPERAMENTS:\n  //    return {...state, \n  //     filtered: state.dogsCopy.filter(el=>el.temperaments? el.temperaments.includes(action.payload):null)\n\n  //   }; \n  \n  //   case FILTER_BY:\n  //     if(action.payload === 'DB'){\n  //       if( state.allDogs.filter((item)=> (typeof item.id) === 'string').length === 0 ){\n  //          return alert('no dog')\n  //       }\n  //       return {\n  //           ...state, \n  //           filtered: state.allDogs?.filter((item)=> (typeof item.id) === 'string')}\n  //       }\n      \n  //   else {\n  //       return {\n  //           ...state, \n  //           filtered: state.allDogs.filter((item)=> (typeof item.id) === 'number')}\n  //       } ;  \n\n  //   case CHARGE_ALL:\n  //     return{\n  //       ...state,\n  //       filtered:state.dogsCopy\n  //     }; \n\n\n        \n\n  //     case ORDER_BY:\n  //       if(action.payload === 'A-Z'){\n  //         return {\n  //             ...state, \n  //             filtered: [...state.filtered].sort((prev, next) => {\n  //             if(prev.name > next.name) return 1\n  //             if(prev.name < next.name) return -1\n  //             return 0\n  //         })}}\n            \n  //     if(action.payload === 'Z-A'){\n  //         return {\n  //             ...state, \n  //             filtered: [...state.filtered].sort((prev, next) => {\n  //             if(prev.name > next.name) return -1\n  //             if(prev.name < next.name) return 1\n  //             return 0\n  //         })}}\n            \n  //     if(action.payload === 'desc'){\n  //         return {\n  //             ...state, \n  //             filtered: [...state.filtered].sort((prev,next) => prev.weight.slice(0,2) - next.weight.slice(0,2) )}\n  //        }\n            \n  //     if(action.payload === 'asc'){\n  //         return {\n  //             ...state, \n  //             filtered: [...state.filtered].sort((prev,next) => next.weight.slice(0,2) - prev.weight.slice(0,2))}\n  //         }     \n  //     else {\n  //         return {\n  //             ...state, \n  //             filtered: state.dogsCopy}\n  //         };\n\n\n\n\n    default:\n        return state; \n  }\n}\n\nexport default rootReducer; "],"mappings":"AAAA,SAASA,QAAQ,EAAEC,WAAW,EAAEC,aAAa,EAAEC,gBAAgB;AAC7D;AACAC,YAAY,EAACC,UAAU,EAAEC,MAAM,EAAEC,KAAK,QAAQ,WAAW;AAE3D,MAAMC,YAAY,GAAE;EAAG;EACvBC,OAAO,EAAC,EAAE;EAACC,QAAQ,EAAC,EAAE;EAAEC,SAAS,EAAE,CAAC,CAAC;EAAEC,YAAY,EAAC,EAAE;EAAEC,QAAQ,EAAC,EAAE;EAAEC,WAAW,EAAC,EAAE,CAAC;AAEpF,CAAC;;AAGD,OAAO,MAAMC,WAAW,GAAC,SAAAA,CAAA,EAA0C;EAAA,IAAzCC,KAAK,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGT,YAAY;EAAA,IAAGY,MAAM,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAA,IAAEE,OAAO,GAAAJ,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;EAAK;EACnE,QAAQC,MAAM,CAACE,IAAI;IACjB,KAAKtB,QAAQ;MACT,OAAO;QAAC,GAAGgB,KAAK;QAAE;QACdP,OAAO,EAAEW,MAAM,CAACC,OAAO;QACvBX,QAAQ,EAAEU,MAAM,CAACC,OAAO;QACxBR,QAAQ,EAACO,MAAM,CAACC;MACpB,CAAC;IACH,KAAKpB,WAAW;MACd,OAAO;QAAC,GAAGe,KAAK;QACdH,QAAQ,EAACO,MAAM,CAACC;MAElB,CAAC;IAEJ,KAAKnB,aAAa;MACd,OAAM;QAAC,GAAGc,KAAK;QACdL,SAAS,EAACS,MAAM,CAACC;MACrB,CAAC;IAEH,KAAKjB,YAAY;MAAK;MACpB,OAAM;QACJ,GAAGY,KAAK;QACRL,SAAS,EAAC,CAAC;MACb,CAAC;IACH,KAAKN,UAAU;MACb,OAAO;QACL,GAAGW,KAAK;QACTP,OAAO,EAAC;MACT,CAAC;IAEH,KAAKN,gBAAgB;MACjB,OAAO;QAAC,GAAGa,KAAK;QAChBJ,YAAY,EAAEQ,MAAM,CAACC;MAEvB,CAAC;IAEH,KAAKf,MAAM;MACT,MAAMiB,mBAAmB,GAAGP,KAAK,CAACP,OAAO,CAACe,MAAM,CAACC,GAAG,IAClDA,GAAG,CAACb,YAAY,KAAIS,OAAO,CAAC;MAC9B,OAAO;QACL,GAAGL;MACL,CAAC;;IAEL;IACA;IACA;;IAEA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAKA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAKE;MACI,OAAOA,KAAK;EAAC;AAErB,CAAC;AAED,eAAeD,WAAW"},"metadata":{},"sourceType":"module"}