{"ast":null,"code":"var _jsxFileName = \"/Users/lizzyortiz/Downloads/PI-Dogs-main/client/src/components/FilterBy/FilterBy.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React from \"react\";\n// import { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { getByTemperaments, filterByTemperaments } from \"../../redux/actions\";\n\nconst FilterBy = () => {\n  //     const dispatch = useDispatch();\n  //     const [filterValue, setFilterValue] = useState(\"\");\n  //     // const temperaments = useSelector((state) => state.temperaments);\n  //     const filteredTemperaments = useSelector((state) => state.filteredTemperaments);\n\n  //     useEffect(() => {\n  //         // Aquí puedes cargar los temperamentos del backend o de alguna API externa\n  //         // utilizando una función de Redux, por ejemplo, `fetchTemperaments`.\n  //         // Aquí utilizo un array de ejemplo.\n  //         const temperaments = [\n  //           { name: \"Friendly\" },\n  //           { name: \"Energetic\" },\n  //           { name: \"Calm\" },\n  //           { name: \"Shy\" },\n  //           { name: \"Confident\" },\n  //         ];\n  //         dispatch(getByTemperaments(temperaments));\n  //   }, [dispatch]);\n\n  //   const handleFilter = (e) => {\n  //     setFilterValue(e.target.value);\n  //     dispatch(filterByTemperaments(e.target.value));\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_c = FilterBy;\nexport default FilterBy;\nvar _c;\n$RefreshReg$(_c, \"FilterBy\");","map":{"version":3,"names":["FilterBy","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/lizzyortiz/Downloads/PI-Dogs-main/client/src/components/FilterBy/FilterBy.jsx"],"sourcesContent":["// import React from \"react\";\n// import { useEffect, useState } from \"react\";\n// import { useDispatch, useSelector } from \"react-redux\";\n// import { getByTemperaments, filterByTemperaments } from \"../../redux/actions\";\n\n\nconst FilterBy = () => {\n//     const dispatch = useDispatch();\n//     const [filterValue, setFilterValue] = useState(\"\");\n//     // const temperaments = useSelector((state) => state.temperaments);\n//     const filteredTemperaments = useSelector((state) => state.filteredTemperaments);\n\n\n//     useEffect(() => {\n//         // Aquí puedes cargar los temperamentos del backend o de alguna API externa\n//         // utilizando una función de Redux, por ejemplo, `fetchTemperaments`.\n//         // Aquí utilizo un array de ejemplo.\n//         const temperaments = [\n//           { name: \"Friendly\" },\n//           { name: \"Energetic\" },\n//           { name: \"Calm\" },\n//           { name: \"Shy\" },\n//           { name: \"Confident\" },\n//         ];\n//         dispatch(getByTemperaments(temperaments));\n//   }, [dispatch]);\n\n//   const handleFilter = (e) => {\n//     setFilterValue(e.target.value);\n//     dispatch(filterByTemperaments(e.target.value));\n//   };\n    \n  return (\n    <div>\n        <h1></h1>\n      {/* <input type=\"text\" value={filterValue} onChange={handleFilter} />\n      <ul>\n        {filteredTemperaments.map((temperament) => (\n          <li key={temperament.name}>{temperament.name}</li>\n        ))}\n      </ul> */}\n    </div>\n  );\n};\n\nexport default FilterBy;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAGA,MAAMA,QAAQ,GAAGA,CAAA,KAAM;EACvB;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEE,oBACEC,OAAA;IAAAC,QAAA,eACID,OAAA;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAS;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAOP;AAEV,CAAC;AAACC,EAAA,GArCIP,QAAQ;AAuCd,eAAeA,QAAQ;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}