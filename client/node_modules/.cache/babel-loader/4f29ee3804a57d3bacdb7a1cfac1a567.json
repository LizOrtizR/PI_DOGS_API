{"ast":null,"code":"var _jsxFileName = \"/Users/lizzyortiz/Downloads/PI-Dogs-main/client/src/components/FilterBy/FilterBy.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getByTemperaments, filterByTemperaments } from \"../../redux/actions\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FilterBy = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [filterValue, setFilterValue] = useState(\"\");\n  // const temperaments = useSelector((state) => state.temperaments);\n  const filteredTemperaments = useSelector(state => state.filteredTemperaments);\n  useEffect(() => {\n    // Aquí puedes cargar los temperamentos del backend o de alguna API externa\n    // utilizando una función de Redux, por ejemplo, `fetchTemperaments`.\n    // Aquí utilizo un array de ejemplo.\n    const temperaments = [{\n      name: \"Friendly\"\n    }, {\n      name: \"Energetic\"\n    }, {\n      name: \"Calm\"\n    }, {\n      name: \"Shy\"\n    }, {\n      name: \"Confident\"\n    }];\n    dispatch(getByTemperaments(temperaments));\n  }, [dispatch]);\n  const handleFilter = e => {\n    setFilterValue(e.target.value);\n    dispatch(filterByTemperaments(e.target.value));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: filterValue,\n      onChange: handleFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: filteredTemperaments.map(temperament => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: temperament.name\n      }, temperament.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(FilterBy, \"QYTeytCsvtv7fjQpU6j2uclufmA=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = FilterBy;\nexport default FilterBy;\nvar _c;\n$RefreshReg$(_c, \"FilterBy\");","map":{"version":3,"names":["React","useEffect","useState","useDispatch","useSelector","getByTemperaments","filterByTemperaments","jsxDEV","_jsxDEV","FilterBy","_s","dispatch","filterValue","setFilterValue","filteredTemperaments","state","temperaments","name","handleFilter","e","target","value","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","map","temperament","_c","$RefreshReg$"],"sources":["/Users/lizzyortiz/Downloads/PI-Dogs-main/client/src/components/FilterBy/FilterBy.jsx"],"sourcesContent":["import React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getByTemperaments, filterByTemperaments } from \"../../redux/actions\";\n\n\nconst FilterBy = () => {\n    const dispatch = useDispatch();\n    const [filterValue, setFilterValue] = useState(\"\");\n    // const temperaments = useSelector((state) => state.temperaments);\n    const filteredTemperaments = useSelector((state) => state.filteredTemperaments);\n\n\n    useEffect(() => {\n        // Aquí puedes cargar los temperamentos del backend o de alguna API externa\n        // utilizando una función de Redux, por ejemplo, `fetchTemperaments`.\n        // Aquí utilizo un array de ejemplo.\n        const temperaments = [\n          { name: \"Friendly\" },\n          { name: \"Energetic\" },\n          { name: \"Calm\" },\n          { name: \"Shy\" },\n          { name: \"Confident\" },\n        ];\n        dispatch(getByTemperaments(temperaments));\n  }, [dispatch]);\n\n  const handleFilter = (e) => {\n    setFilterValue(e.target.value);\n    dispatch(filterByTemperaments(e.target.value));\n  };\n    \n  return (\n    <div>\n      <input type=\"text\" value={filterValue} onChange={handleFilter} />\n      <ul>\n        {filteredTemperaments.map((temperament) => (\n          <li key={temperament.name}>{temperament.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default FilterBy;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,iBAAiB,EAAEC,oBAAoB,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAG9E,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAMC,QAAQ,GAAGR,WAAW,EAAE;EAC9B,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAClD;EACA,MAAMY,oBAAoB,GAAGV,WAAW,CAAEW,KAAK,IAAKA,KAAK,CAACD,oBAAoB,CAAC;EAG/Eb,SAAS,CAAC,MAAM;IACZ;IACA;IACA;IACA,MAAMe,YAAY,GAAG,CACnB;MAAEC,IAAI,EAAE;IAAW,CAAC,EACpB;MAAEA,IAAI,EAAE;IAAY,CAAC,EACrB;MAAEA,IAAI,EAAE;IAAO,CAAC,EAChB;MAAEA,IAAI,EAAE;IAAM,CAAC,EACf;MAAEA,IAAI,EAAE;IAAY,CAAC,CACtB;IACDN,QAAQ,CAACN,iBAAiB,CAACW,YAAY,CAAC,CAAC;EAC/C,CAAC,EAAE,CAACL,QAAQ,CAAC,CAAC;EAEd,MAAMO,YAAY,GAAIC,CAAC,IAAK;IAC1BN,cAAc,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAC9BV,QAAQ,CAACL,oBAAoB,CAACa,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC,CAAC;EAChD,CAAC;EAED,oBACEb,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAOe,IAAI,EAAC,MAAM;MAACF,KAAK,EAAET,WAAY;MAACY,QAAQ,EAAEN;IAAa;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACjEpB,OAAA;MAAAc,QAAA,EACGR,oBAAoB,CAACe,GAAG,CAAEC,WAAW,iBACpCtB,OAAA;QAAAc,QAAA,EAA4BQ,WAAW,CAACb;MAAI,GAAnCa,WAAW,CAACb,IAAI;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAC1B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACD;AAEV,CAAC;AAAClB,EAAA,CApCID,QAAQ;EAAA,QACON,WAAW,EAGCC,WAAW;AAAA;AAAA2B,EAAA,GAJtCtB,QAAQ;AAsCd,eAAeA,QAAQ;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module"}